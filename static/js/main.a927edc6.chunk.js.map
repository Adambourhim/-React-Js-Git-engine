{"version":3,"sources":["components/users/Searchusers.js","components/users/User.js","components/users/Users.js","components/partials/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Searchusers","state","search","handleform","e","setState","target","value","searchusers","preventDefault","props","getSearchUsers","onSubmit","this","id","onChange","placeholder","type","className","Component","user","class","src","x","avatar_url","alt","login","href","html_url","Users","getusers","axios","get","then","response","users","data","SearchUsersFromGit","items","map","key","Navbar","data-toggle","data-target","aria-controls","aria-expanded","aria-label","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mSA8BeA,E,4MA3BVC,MAAQ,CACJC,OAAS,I,EAEbC,WAAa,SAACC,GACX,EAAKC,SAAU,CACXH,OAAQE,EAAEE,OAAOC,S,EAGxBC,YAAc,SAACJ,GACXA,EAAEK,iBACF,EAAKC,MAAMC,eAAe,EAAKV,MAAMC,S,uDAGtC,OAEQ,0BAAMU,SAAUC,KAAKL,aACjB,yBAAKM,GAAG,cACJ,2BAAOC,SAAUF,KAAKV,WAAYI,MAAQM,KAAKZ,MAAMC,OAAQc,YAAY,mBAAmBF,GAAG,SAASG,KAAK,OAAOC,UAAU,kBAElI,4BAAQA,UAAU,4BAAlB,e,GApBOC,aCANC,E,uKAEb,OAIe,yBAAKC,MAAM,QACR,yBAAKA,MAAM,eAAeC,IAAKT,KAAKH,MAAMa,EAAEC,WAAYC,IAAI,KACxD,yBAAKJ,MAAM,aACP,wBAAIA,MAAM,cAAcR,KAAKH,MAAMa,EAAEG,OACrC,2BAEI,uBAAGC,KAAMd,KAAKH,MAAMa,EAAEK,SAAUV,UAAU,mBAA1C,uB,GAZJC,aC6DnBU,EA1Df,kDACI,WAAYnB,GAAQ,IAAD,8BACf,cAAMA,IAMVoB,SAAW,WACPC,IAAMC,IAAI,gCACHC,MAAM,SAAAC,GACH,EAAK7B,SAAU,CACX8B,MAAOD,EAASE,WAXf,EAkBnBC,mBAAqB,SAACD,GACN,IAARA,GACAL,IAAMC,IAAN,gDAAmDI,IAClDH,MAAK,SAAAC,GACF,EAAK7B,SAAU,CACX8B,MAAQD,EAASE,KAAKE,YApBlC,EAAKrC,MAAQ,CACPkC,MAAQ,IAJC,EADvB,gEAiBQtB,KAAKiB,aAjBb,+BA+BQ,OACI,6BACI,yBAAKZ,UAAU,YACT,yBAAKA,UAAU,aACZ,kBAAC,EAAD,CAAaP,eAAgBE,KAAKwB,uBAG3C,yBAAKnB,UAAU,OACZL,KAAKZ,MAAMkC,MAAMI,KAAI,SAAChB,GAEvB,OAEE,yBAAKL,UAAU,WAAWsB,IAAKjB,EAAET,IAE5B,kBAAC,EAAD,CAAMS,EAAGA,cA7ClC,GAA2BJ,aCqBZsB,E,uKAtBP,OACI,6BACI,yBAAKvB,UAAU,kDACZ,uBAAGA,UAAU,eAAeS,KAAK,KAAjC,cACE,4BAAQT,UAAU,2BAA2BD,KAAK,SAASyB,cAAY,WAAWC,cAAY,oBAAoBC,gBAAc,mBAC9HC,gBAAc,QAAQC,aAAW,qBAChC,0BAAM5B,UAAU,yBAEtB,yBAAKA,UAAU,2BAA2BJ,GAAG,oBAC3C,wBAAII,UAAU,mCACV,wBAAIA,UAAU,mBACV,uBAAGA,UAAU,WAAWS,KAAK,KAA7B,SAAuC,0BAAMT,UAAU,WAAhB,uB,GAb9CC,aCkBN4B,MAdf,WAEK,OACE,yBAAK7B,UAAU,OACb,kBAAC,EAAD,MACC,yBAAKG,MAAM,kBACT,kBAAE,EAAF,SCAQ2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a927edc6.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\n class Searchusers extends Component {\n     state = {\n         search : ''\n     }\n     handleform = (e) => {\n        this.setState ({\n            search: e.target.value\n        })\n     }\n     searchusers = (e) => {\n         e.preventDefault();\n         this.props.getSearchUsers(this.state.search)\n     }\n    render() {\n        return (\n            \n                <form onSubmit={this.searchusers}>\n                    <div id=\"form-group\">\n                        <input onChange={this.handleform} value= {this.state.search} placeholder=\"Search users ...\" id=\"search\" type=\"text\" className=\"form-control\"/>\n                    </div>\n                    <button className=\"btn btn-danger btn-block\">Search</button>\n                </form>\n                \n             \n        )\n    }\n}\n\nexport default Searchusers ;","import React, { Component } from 'react'\n\nexport default class user extends Component {\n    render() {\n        return (\n            \n                \n                \n                       <div class=\"card\">\n                          <img class=\"card-img-top\" src={this.props.x.avatar_url} alt=\"\" />\n                              <div class=\"card-body\">\n                                  <h4 class=\"card-title\">{this.props.x.login}</h4>\n                                  <p>\n                                      \n                                      <a href={this.props.x.html_url} className=\"btn btn-warning\">Repositories</a>\n                                  </p>\n                                </div>\n                        </div>\n                    \n            \n        )\n    }\n}\n","import React, { Component } from 'react'\nimport axios from 'axios' ;\nimport Searchusers from './Searchusers';\nimport User from './User';\n\nexport class Users extends Component {\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n              users : []\n        }\n    }\n    getusers = () => {\n        axios.get('https://api.github.com/users') \n              .then (response => {\n                  this.setState ({\n                      users: response.data \n                  })\n              })\n    }\n    componentDidMount(){\n        this.getusers();\n    }\n    SearchUsersFromGit = (data) => {\n        if (data != '') {\n            axios.get(`https://api.github.com/search/users?q=${data}`)\n            .then(response => {\n                this.setState ({\n                    users : response.data.items\n                })\n            })\n        }\n    }\n    \n    render() {\n        return (\n            <div>\n                <div className=\"row my-2\">\n                      <div className=\"col-md-12\">\n                         <Searchusers getSearchUsers={this.SearchUsersFromGit}/>\n                      </div>\n                </div>\n                <div className=\"row\">\n                  {this.state.users.map((x)=>{\n\n                  return (\n               \n                    <div className=\"col-md-4\" key={x.id}>\n\n                         <User x={x} />\n                     </div>\n                    )\n\n                    })}\n               \n               </div>\n                \n            </div>\n        )\n    }\n}\n\nexport default Users ; ","import React, { Component } from 'react'\n\nclass Navbar extends Component {\n    render() {\n        return (\n            <div>\n                <nav className=\"navbar navbar-expand-sm navbar-dark bg-primary\">\n                   <a className=\"navbar-brand\" href=\"#\">Git engine</a>\n                     <button className=\"navbar-toggler d-lg-none\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsibleNavId\" aria-controls=\"collapsibleNavId\"\n                       aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                        <span className=\"navbar-toggler-icon\"></span>\n                      </button>\n                  <div className=\"collapse navbar-collapse\" id=\"collapsibleNavId\">\n                    <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\n                        <li className=\"nav-item active\">\n                            <a className=\"nav-link\" href=\"#\">Users <span className=\"sr-only\">(current)</span></a>\n                        </li>   \n                    </ul>\n                  \n                   </div>\n               </nav>\n                \n            </div>\n        )\n    }\n}\nexport default Navbar ;","import React from 'react';\nimport './App.css';\nimport Users from './components/users/Users'\nimport Navbar from './components/partials/Navbar'\nimport {BrowserRouter as Router , Switch , Route} from 'react-router-dom'\n\nfunction App() {\n  \n     return (\n       <div className=\"App\"> \n         <Navbar />\n          <div class=\"container mt-2\">\n            < Users />\n          </div>\n     \n        </div>\n      );\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}